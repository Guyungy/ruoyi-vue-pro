# 项目启动和部署指南

## 快速启动

### 环境要求
- **JDK**: 1.8+ (推荐 JDK 8 或 JDK 17)
- **Maven**: 3.6+
- **MySQL**: 5.7+ 或 8.0+
- **Redis**: 5.0+
- **Node.js**: 16+ (前端项目)

### 启动步骤

#### 1. 数据库初始化
```sql
-- 创建数据库
CREATE DATABASE ruoyi_vue_pro;

-- 导入数据表结构和基础数据
-- 使用 sql/mysql/ruoyi-vue-pro.sql
```
SQL 脚本路径：[sql/mysql/ruoyi-vue-pro.sql](mdc:sql/mysql/ruoyi-vue-pro.sql)

#### 2. 配置修改
编辑配置文件：[application.yaml](mdc:yudao-server/src/main/resources/application.yaml)
```yaml
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/ruoyi_vue_pro
    username: root
    password: 123456
  
  data:
    redis:
      host: 127.0.0.1
      port: 6379
      password: 
```

#### 3. 启动后端服务
运行主类：[YudaoServerApplication.java](mdc:yudao-server/src/main/java/cn/iocoder/yudao/server/YudaoServerApplication.java)
```bash
# 或使用 Maven 命令
mvn spring-boot:run -f yudao-server/pom.xml
```

#### 4. 访问管理后台
- **后端 API**: http://localhost:48080
- **API 文档**: http://localhost:48080/doc.html
- **默认账号**: admin / admin123

## Docker 部署

### Docker Compose 部署
使用提供的 Docker 配置：[script/docker/docker-compose.yml](mdc:script/docker/docker-compose.yml)

```bash
cd script/docker
docker-compose up -d
```

### 自定义 Docker 镜像
使用项目的 Dockerfile：[yudao-server/Dockerfile](mdc:yudao-server/Dockerfile)

```bash
# 构建镜像
docker build -t yudao-server .

# 运行容器
docker run -d -p 48080:48080 yudao-server
```

## 生产环境部署

### 配置优化
1. **数据库连接池调优**
2. **Redis 连接配置**
3. **JVM 参数优化**
4. **日志级别调整**

### 部署脚本
使用提供的部署脚本：[script/shell/deploy.sh](mdc:script/shell/deploy.sh)

### 监控配置
- **应用监控**: Spring Boot Admin
- **链路追踪**: SkyWalking
- **日志收集**: 集成日志中心

## 前端项目启动

### Vue3 版本 (推荐)
```bash
git clone https://gitee.com/yudaocode/yudao-ui-admin-vue3.git
cd yudao-ui-admin-vue3
npm install
npm run dev
```

### Vue2 版本
```bash
git clone https://gitee.com/yudaocode/yudao-ui-admin-vue2.git
cd yudao-ui-admin-vue2
npm install
npm run dev
```

## 常见问题

### 启动失败
1. 检查数据库连接配置
2. 确认 Redis 服务正常
3. 查看启动日志错误信息
4. 参考官方文档: https://doc.iocoder.cn/quick-start/

### 端口冲突
默认端口 48080，可在配置文件中修改：
```yaml
server:
  port: 48080
```

### 内存不足
调整 JVM 参数：
```bash
java -Xms512m -Xmx1024m -jar yudao-server.jar
```

## 多环境配置

### 开发环境
- 配置文件：`application-dev.yaml`
- 数据库：本地 MySQL
- Redis：本地 Redis

### 测试环境
- 配置文件：`application-test.yaml`
- 外部数据库和 Redis

### 生产环境
- 配置文件：`application-prod.yaml`
- 高可用数据库集群
- Redis 集群

## CI/CD 集成

### Jenkins 部署
使用提供的 Jenkins 配置：[script/jenkins/Jenkinsfile](mdc:script/jenkins/Jenkinsfile)

### 自动化部署流程
1. 代码提交触发构建
2. 执行单元测试
3. 构建 Docker 镜像
4. 部署到目标环境
5. 健康检查

## 性能调优

### 数据库优化
- 添加适当索引
- 分库分表（如需要）
- 读写分离配置

### 缓存策略
- Redis 缓存热点数据
- 本地缓存配置
- 缓存过期策略

### 应用优化
- 连接池参数调优
- 线程池配置
- GC 参数优化