<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!-- ==================== 项目基本信息 ==================== -->
    <groupId>cn.iocoder.boot</groupId>
    <artifactId>yudao</artifactId>
    <version>${revision}</version>
    <packaging>pom</packaging>
    
    <!-- ==================== 模块管理 ==================== -->
    <modules>
        <!-- 依赖管理模块 -->
        <module>yudao-dependencies</module>
        <!-- 框架组件模块 -->
        <module>yudao-framework</module>
        <!-- 主启动项目模块 -->
        <module>yudao-server</module>
        
        <!-- ==================== 业务模块 ==================== -->
        <!-- 系统管理模块：用户、角色、权限等基础功能 -->
        <module>yudao-module-system</module>
        <!-- 基础设施模块：文件、配置、代码生成等 -->
        <module>yudao-module-infra</module>
        
        <!-- 以下模块默认关闭，按需开启 -->
        <!-- 会员中心模块：会员管理、积分等 -->
<!--        <module>yudao-module-member</module>-->
        <!-- 工作流模块：Flowable 工作流引擎 -->
<!--        <module>yudao-module-bpm</module>-->
        <!-- 报表模块：积木报表集成 -->
<!--        <module>yudao-module-report</module>-->
        <!-- 微信公众号模块：公众号管理 -->
<!--        <module>yudao-module-mp</module>-->
        <!-- 支付模块：支付宝、微信支付等 -->
<!--        <module>yudao-module-pay</module>-->
        <!-- 商城模块：商品、订单、营销等 -->
<!--        <module>yudao-module-mall</module>-->
        <!-- CRM 客户关系管理模块 -->
<!--        <module>yudao-module-crm</module>-->
        <!-- ERP 企业资源计划模块 -->
<!--        <module>yudao-module-erp</module>-->
        <!-- IoT 物联网模块 -->
<!--        <module>yudao-module-iot</module>-->
        
        <!-- AI 大模型模块 -->
        <!-- 注意：开启前请参考 https://doc.iocoder.cn/ai/build/ 文档，对 JDK 版本有要求！ -->
<!--        <module>yudao-module-ai</module>-->
    </modules>

    <!-- ==================== 项目描述信息 ==================== -->
    <name>${project.artifactId}</name>
    <description>芋道项目基础脚手架 - 基于 Spring Boot 的快速开发框架</description>
    <url>https://github.com/YunaiV/ruoyi-vue-pro</url>

    <!-- ==================== 版本配置 ==================== -->
    <properties>
        <!-- 项目版本号 -->
        <revision>2.6.1-jdk8-SNAPSHOT</revision>
        
        <!-- ==================== JDK 和 Maven 相关配置 ==================== -->
        <java.version>1.8</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        
        <!-- ==================== Maven 插件版本 ==================== -->
        <!-- 单元测试插件：用于运行 JUnit 测试 -->
        <maven-surefire-plugin.version>3.2.2</maven-surefire-plugin.version>
        <!-- 编译插件：处理 Lombok、MapStruct 等注解处理器 -->
        <maven-compiler-plugin.version>3.14.0</maven-compiler-plugin.version>
        <!-- 版本统一插件：统一管理 revision 版本号 -->
        <flatten-maven-plugin.version>1.6.0</flatten-maven-plugin.version>
        
        <!-- ==================== 注解处理器版本 ==================== -->
        <!-- Lombok：简化 Java 代码编写 -->
        <!-- 注意：maven-surefire-plugin 暂时无法通过 bom 的依赖读取（兼容老版本 IDEA 2024 及以前版本） -->
        <lombok.version>1.18.38</lombok.version>
        <!-- Spring Boot：核心框架版本 -->
        <spring.boot.version>2.7.18</spring.boot.version>
        <!-- MapStruct：对象映射框架 -->
        <mapstruct.version>1.6.3</mapstruct.version>
    </properties>

    <!-- ==================== 依赖管理 ==================== -->
    <dependencyManagement>
        <dependencies>
            <!-- 导入统一依赖管理：所有依赖版本都在 yudao-dependencies 中统一管理 -->
            <dependency>
                <groupId>cn.iocoder.boot</groupId>
                <artifactId>yudao-dependencies</artifactId>
                <version>${revision}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!-- ==================== 构建配置 ==================== -->
    <build>
        <!-- ==================== 插件管理 ==================== -->
        <pluginManagement>
            <plugins>
                <!-- 单元测试插件：用于运行单元测试 -->
                <!-- 注意：需要使用 3.0.X+ 版本，因为要支持 JUnit 5 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                
                <!-- 编译插件：解决 spring-boot-configuration-processor + Lombok + MapStruct 组合问题 -->
                <!-- 参考：https://stackoverflow.com/questions/33483697/re-run-spring-boot-configuration-annotation-processor-to-update-generated-metada -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <!-- 注解处理器路径：配置各种注解处理器的执行顺序 -->
                        <annotationProcessorPaths>
                            <!-- Spring Boot 配置处理器：生成配置属性元数据 -->
                            <path>
                                <groupId>org.springframework.boot</groupId>
                                <artifactId>spring-boot-configuration-processor</artifactId>
                                <version>${spring.boot.version}</version>
                            </path>
                            <!-- Lombok：代码生成器 -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                            <!-- Lombok 与 MapStruct 绑定：确保 Lombok 生成的 getter/setter 方法能被 MapStruct 正确识别 -->
                            <!-- 解决 "No property named xxx exists" 的编译错误 -->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>0.2.0</version>
                            </path>
                            <!-- MapStruct 处理器：对象映射代码生成 -->
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
                
                <!-- 版本统一插件：统一管理 revision 版本号 -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                </plugin>
            </plugins>
        </pluginManagement>

        <!-- ==================== 实际使用的插件 ==================== -->
        <plugins>
            <!-- 版本统一插件：解决多模块项目版本统一管理问题 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>${flatten-maven-plugin.version}</version>
                <configuration>
                    <!-- OSS 模式：适用于开源项目的版本扁平化 -->
                    <flattenMode>oss</flattenMode>
                    <!-- 更新 POM 文件：将 revision 替换为实际版本号 -->
                    <updatePomFile>true</updatePomFile>
                </configuration>
                <executions>
                    <!-- 扁平化执行：在 process-resources 阶段执行 -->
                    <execution>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                    </execution>
                    <!-- 清理扁平化文件：在 clean 阶段执行 -->
                    <execution>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <!-- ==================== Maven 仓库配置 ==================== -->
    <!-- 使用国内镜像源，提升依赖下载速度 -->
    <repositories>
        <!-- 华为云 Maven 镜像 -->
        <repository>
            <id>huaweicloud</id>
            <name>华为云 Maven 仓库</name>
            <url>https://mirrors.huaweicloud.com/repository/maven/</url>
        </repository>
        
        <!-- 阿里云 Maven 镜像 -->
        <repository>
            <id>aliyunmaven</id>
            <name>阿里云 Maven 仓库</name>
            <url>https://maven.aliyun.com/repository/public</url>
        </repository>

        <!-- Spring 里程碑版本仓库 -->
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <!-- 禁用快照版本 -->
                <enabled>false</enabled>
            </snapshots>
        </repository>
        
        <!-- Spring 快照版本仓库 -->
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <!-- 禁用正式版本 -->
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>

</project>
